{"version":3,"sources":["webpack:///./src/pages/tags.js"],"names":["pageQuery","Tags","recipes","data","allMdx","edges","tagsSet","Set","recipeMap","Map","forEach","recipeData","node","id","frontmatter","slug","tags","recipe","title","tag","string","capitalisedTag","charAt","toUpperCase","slice","add","recipesForTag","get","push","set","orderedTags","Array","from","sort","map","key","to"],"mappings":"2FAAA,8GAUA,IAgDaA,EAAS,aAiBPC,UAjEF,SAAC,GAAc,IACXC,EADU,EAAXC,KACkBC,OAAxBC,MACFC,EAAU,IAAIC,IACdC,EAAY,IAAIC,IAEtBP,EAAQQ,SAAQ,YAA2B,IAAlBC,EAAiB,EAAvBC,KACTC,EAAoBF,EAApBE,GAAIC,EAAgBH,EAAhBG,YACJC,EAAsBD,EAAtBC,KAAMC,EAAgBF,EAAhBE,KACRC,EAAS,CAAEJ,KAAIE,OAAMG,MADGJ,EAAVI,OAGpBF,EAAKN,SAAQ,SAAAS,GACX,IAfyBC,EAenBC,GAfmBD,EAeoBD,GAdnCG,OAAO,GAAGC,cAAgBH,EAAOI,MAAM,GAejDlB,EAAQmB,IAAIJ,GAEZ,IAAIK,EAAgBlB,EAAUmB,IAAIN,GAE9BK,EACFA,EAAcE,KAAKX,GAEnBS,EAAgB,CAACT,GAGnBT,EAAUqB,IAAIR,EAAgBK,SAIlC,IAAMI,EAAcC,MAAMC,KAAK1B,GAAS2B,OAExC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACGH,EAAYI,KAAI,SAAAf,GAAG,OAClB,iCACE,4BAAKA,GACL,4BACGX,EAAUmB,IAAIR,GAAKe,KAAI,SAAAjB,GAAM,OAC5B,wBAAIkB,IAAKlB,EAAOJ,IACd,kBAAC,OAAD,CAAMuB,GAAE,MAAQnB,EAAOF,MAASE,EAAOC","file":"component---src-pages-tags-js-fd24f8c9c0ce9c35d381.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\nimport { Container } from '../components/atoms';\nimport { Layout } from '../components/organisms';\nimport { Link } from 'gatsby';\n\nfunction capitaliseFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nconst Tags = ({ data }) => {\n  const { edges: recipes } = data.allMdx;\n  const tagsSet = new Set();\n  const recipeMap = new Map();\n\n  recipes.forEach(({ node: recipeData }) => {\n    const { id, frontmatter } = recipeData;\n    const { slug, tags, title } = frontmatter;\n    const recipe = { id, slug, title };\n\n    tags.forEach(tag => {\n      const capitalisedTag = capitaliseFirstLetter(tag);\n      tagsSet.add(capitalisedTag);\n\n      let recipesForTag = recipeMap.get(capitalisedTag);\n\n      if (recipesForTag) {\n        recipesForTag.push(recipe);\n      } else {\n        recipesForTag = [recipe];\n      }\n\n      recipeMap.set(capitalisedTag, recipesForTag);\n    });\n  });\n\n  const orderedTags = Array.from(tagsSet).sort();\n\n  return (\n    <Layout>\n      <Container>\n        {orderedTags.map(tag => (\n          <section>\n            <h2>{tag}</h2>\n            <ul>\n              {recipeMap.get(tag).map(recipe => (\n                <li key={recipe.id}>\n                  <Link to={`../${recipe.slug}`}>{recipe.title}</Link>\n                </li>\n              ))}\n            </ul>\n          </section>\n        ))}\n      </Container>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query tagsQuery {\n    allMdx {\n      edges {\n        node {\n          id\n          frontmatter {\n            tags\n            slug\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Tags;\n"],"sourceRoot":""}